library(jsonlite)
response <- GET(base, query = query.params)
library(jsonlite)
# API Documentation: http://www.omdbapi.com/
# API Endpoint: http://www.omdbapi.com/?
tv.series <- "Breaking Bad"
base <- "http://www.omdbapi.com/"
query.params <- list(t = tv.series)
response <- GET(base, query = query.params)
library(httr)
tv.series <- "Breaking Bad"
base <- "http://www.omdbapi.com/"
query.params <- list(t = tv.series)
response <- GET(base, query = query.params)
names(response)
names(json)
tv.series <- "Breaking Bad"
base <- "http://www.omdbapi.com/"
query.params <- list(t = tv.series)
response <- GET(base, query = query.params)
body <- content(response, "text")
json <- fromJSON(body)
names(json)
json$totalSeasons
total.seasons <- json$totalSeasons
total.seasons <- as.numeric(json$totalSeasons)
count <- c(1:total.seasons)
?returnJSON
response
response$status_code
# API Endpoint: http://www.omdbapi.com/?
tv.series <- "Breaking Bad"
base <- "http://www.omdbapi.com/"
query <- list(t = tv.series)
tv.series <- returnJSON(base, query)
total.seasons <- as.numeric(tv.series.info$totalSeasons)
count <- c(1:total.seasons)
query<- list(t = tv.series, Season = 1)
season1 <- returnJSON(base, query)
# Takes the base URL and query parameters to return json
returnJSON <- function(base, query) {
response <- GET(base, query)
if(response$status_code == 200) {
body <- content(response, "text")
json <- fromJSON(body)
return(json)
} else {
print("GET response is invalid")
return(NULL)
}
}
tv.series <- "Breaking Bad"
base <- "http://www.omdbapi.com/"
query <- list(t = tv.series)
tv.series <- returnJSON(base, query)
total.seasons <- as.numeric(tv.series.info$totalSeasons)
count <- c(1:total.seasons)
query<- list(t = tv.series, Season = 1)
season1 <- returnJSON(base, query)
returnJSON <- function(base, query.params) {
response <- GET(base, query = query.params)
if(response$status_code == 200) {
body <- content(response, "text")
json <- fromJSON(body)
return(json)
} else {
print("GET response is invalid")
return(NULL)
}
}
tv.series <- "Breaking Bad"
base <- "http://www.omdbapi.com/"
query <- list(t = tv.series)
tv.series <- returnJSON(base, query)
returnJSON <- function(base, query.params) {
response <- GET(base, query = query.params)
if(response$status_code == 200) {
body <- content(response, "text")
json <- fromJSON(body)
return(json)
} else {
print("GET response is invalid")
return(NULL)
}
}
tv.series <- "Breaking Bad"
base <- "http://www.omdbapi.com/"
query <- list(t = tv.series)
tv.series <- returnJSON(base, query)
total.seasons <- as.numeric(tv.series.info$totalSeasons)
tv.series <- "Breaking Bad"
base <- "http://www.omdbapi.com/"
query <- list(t = tv.series)
tv.series.info <- returnJSON(base, query)
total.seasons <- as.numeric(tv.series.info$totalSeasons)
count <- c(1:total.seasons)
query<- list(t = tv.series, Season = 1)
season1 <- returnJSON(base, query)
# Takes the base URL and query parameters to return json
returnJSON <- function(base, query.params) {
response <- GET(base, query = query.params)
if(response$status_code == 200) {
body <- content(response, "text")
json <- fromJSON(body)
return(json)
} else {
print("GET response is invalid")
return(NULL)
}
}
tv.series <- "Breaking Bad"
base <- "http://www.omdbapi.com/"
query <- list(t = tv.series)
tv.series.info <- returnJSON(base, query)
total.seasons <- as.numeric(tv.series.info$totalSeasons)
count <- c(1:total.seasons)
query<- list(t = tv.series, Season = 1)
season1 <- returnJSON(base, query)
names(season1)
is.data.frame(season1$Episodes)
View(season1$Episodes)
data <- data.frame()
tv.series <- "Breaking Bad"
base <- "http://www.omdbapi.com/"
query <- list(t = tv.series)
tv.series.info <- returnJSON(base, query)
total.seasons <- as.numeric(tv.series.info$totalSeasons)
data <- data.frame()
for(season in 1:total.seasons) {
query <- list(t = tv.series, Season = season)
current <- returnJSON(base, query)
data <- data.frame(data, current$Episodes)
}
?rbind
data <- data.frame()
for(season in 1:total.seasons) {
query <- list(t = tv.series, Season = season)
current <- returnJSON(base, query)
data <- rbind(data, current$Episodes, make.row.names = FALSE)
}
View(data)
returnJSON <- function(base, query.params) {
response <- GET(base, query = query.params)
if(response$status_code == 200) {
body <- content(response, "text")
json <- fromJSON(body)
return(json)
} else {
print("GET response is invalid")
return(NULL)
}
}
tv.series <- "Breaking Bad"
base <- "http://www.omdbapi.com/"
# Get information for entire TV series
query <- list(t = tv.series)
tv.series.info <- returnJSON(base, query)
total.seasons <- as.numeric(tv.series.info$totalSeasons)
# Get information for each episode of TV series
tv.series.episodes <- data.frame() # initialize variable outside of for loop
for(season in 1:total.seasons) {
query <- list(t = tv.series, Season = season)
current <- returnJSON(base, query)
data <- rbind(data, current$Episodes, make.row.names = FALSE) # add new season to data frame each time
}
tv.series.episodes <- data.frame() # initialize variable outside of for loop
for(season in 1:total.seasons) {
query <- list(t = tv.series, Season = season)
current <- returnJSON(base, query)
data <- rbind(tv.series.episodes, current$Episodes, make.row.names = FALSE) # add new season to data frame each time
}
# Takes the base URL and query parameters to return json
returnJSON <- function(base, query.params) {
response <- GET(base, query = query.params)
if(response$status_code == 200) {
body <- content(response, "text")
json <- fromJSON(body)
return(json)
} else {
print("GET response is invalid")
return(NULL)
}
}
tv.series <- "Breaking Bad"
base <- "http://www.omdbapi.com/"
# Get information for entire TV series
query <- list(t = tv.series)
tv.series.info <- returnJSON(base, query)
total.seasons <- as.numeric(tv.series.info$totalSeasons)
# Get information for each episode of TV series
tv.series.episodes <- data.frame() # initialize variable outside of for loop
for(season in 1:total.seasons) {
query <- list(t = tv.series, Season = season)
current <- returnJSON(base, query)
data <- rbind(tv.series.episodes, current$Episodes, make.row.names = FALSE) # add new season to data frame each time
}
View(data)
returnJSON <- function(base, query.params) {
response <- GET(base, query = query.params)
if(response$status_code == 200) {
body <- content(response, "text")
json <- fromJSON(body)
return(json)
} else {
print("GET response is invalid")
return(NULL)
}
}
tv.series <- "Breaking Bad"
base <- "http://www.omdbapi.com/"
# Get information for entire TV series
query <- list(t = tv.series)
tv.series.info <- returnJSON(base, query)
total.seasons <- as.numeric(tv.series.info$totalSeasons)
# Get information for each episode of TV series
tv.series.episodes <- data.frame() # initialize variable outside of for loop
for(season in 1:total.seasons) {
query <- list(t = tv.series, Season = season)
current <- returnJSON(base, query)
tv.series.episodes <- rbind(tv.series.episodes, current$Episodes, make.row.names = FALSE) # add new season to data frame each time
}
View(tv.series.episodes)
View(tv.series.episodes)
tv.series.episodes <- data.frame() # initialize variable outside of for loop
for(season in 1:total.seasons) {
query <- list(t = tv.series, Season = season)
current <- returnJSON(base, query)
current <- current$Episodes
current$Episode <- as.numeric(paste0(season, ".", current$Episode))
tv.series.episodes <- rbind(tv.series.episodes, current, make.row.names = FALSE) # add new season to data frame each time
}
View(tv.series.episodes)
tv.series.episodes <- data.frame() # initialize variable outside of for loop
for(season in 1:total.seasons) {
query <- list(t = tv.series, Season = season)
current <- returnJSON(base, query)
current <- current$Episodes
current$Episode <- paste0(season, ".", current$Episode)
tv.series.episodes <- rbind(tv.series.episodes, current, make.row.names = FALSE) # add new season to data frame each time
}
# Takes the base URL and query parameters to return json
returnJSON <- function(base, query.params) {
response <- GET(base, query = query.params)
if(response$status_code == 200) {
body <- content(response, "text")
json <- fromJSON(body)
return(json)
} else {
print("GET response is invalid")
return(NULL)
}
}
# Initialize variables
tv.series <- "Breaking Bad"
base <- "http://www.omdbapi.com/"
# Get information for entire TV series
query <- list(t = tv.series)
tv.series.info <- returnJSON(base, query)
total.seasons <- as.numeric(tv.series.info$totalSeasons)
# Get information for each episode of TV series
tv.series.episodes <- data.frame() # initialize variable outside of for loop
for(season in 1:total.seasons) {
query <- list(t = tv.series, Season = season)
current <- returnJSON(base, query)
current <- current$Episodes
current$Episode <- paste0(season, ".", current$Episode) # add proper episode numbers (season.episode (1.5 instead of 5))
tv.series.episodes <- rbind(tv.series.episodes, current, make.row.names = FALSE) # add new season to data frame each time
}
View(tv.series.episodes)
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("shinythemes")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
v1[v2 != placeholder]
v1 <- c(1, 2, 3)
v2 <- c("placeholder", "not", "placeholder")
df <- data.frame(v1, v2, stringsAsFactors = FALSE)
v1[v2 != placeholder]
v1[v2 != "placeholder"]
v1[v2 != "placeholder"]
v1[v2 == "placeholder"]
v1 <- c(1, 2, 3)
v2 <- c("placeholder", "not", "lol")
df <- data.frame(v1, v2, stringsAsFactors = FALSE)
v1[v2 == "placeholder"]
v1[v2 != "placeholder"]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
